{"version":3,"sources":["components/Modal.jsx","components/Square.jsx","components/Board.jsx","components/Turns.jsx","components/Game.jsx","serviceWorker.js","index.js"],"names":["Modal","_ref","gameOverMsg","type","winner","handleMarkerOptionClick","handleRestartClick","react_default","a","createElement","className","onClick","Square","position","marker","handleSquareClick","data-position","Board","props","components_Square","spaces","Turns","humanTurn","humanMarker","compMarker","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","target","innerHTML","setState","atGameStart","state","dataset","slice","changeTurns","setTimeout","Array","fill","getEndState","player","openSpaces","i","length","push","playerChecked","getOpenSpaces","_this2","isGameOverFor","randomPosition","Math","floor","random","console","log","components_Modal","components_Board","components_Turns","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ba11234.chunk.js","sourcesContent":["import React from 'react';\nimport '../Modal.css';\n\nconst Modal = ({ type, winner, handleMarkerOptionClick, handleRestartClick }) => {\n  let gameOverMsg;\n  switch (winner) {\n    case 'human':\n      gameOverMsg = 'You won!';\n      break;\n    case 'computer':\n      gameOverMsg = 'Aww, you lost.';\n      break;\n    case 'tie':\n      gameOverMsg = 'It\\'s a tie!';\n      break;\n    default:\n      break;\n  }\n\n  if (type === 'chooseOption') {\n    return (\n      <div className=\"Modal\">\n        <p>Choose your marker: </p>\n        <button type=\"button\" className=\"markerChoice\" onClick={handleMarkerOptionClick}>X</button>\n        <button type=\"button\" className=\"markerChoice\" onClick={handleMarkerOptionClick}>O</button>\n      </div>\n    );\n  } else if (type === 'gameOver') {\n    return (\n      <div className=\"Modal\">\n        <p>Game Over</p>\n        <p>{ gameOverMsg }</p>\n        <button type=\"button\" className=\"restart\" onClick={handleRestartClick}>Restart</button>\n      </div>\n    );\n  }\n}\n\nexport default Modal;","import React from 'react';\nimport '../Square.css';\n\nconst Square = ({ position, marker, handleSquareClick }) => {\n  return (\n    <div \n      className=\"Square\"\n      data-position={position}\n      onClick={handleSquareClick}\n    >\n      { marker }\n    </div>\n  );\n}\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\nimport '../Board.css';\n\nfunction Board(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <Square \n          position=\"0\" \n          marker={props.spaces[0]} \n          handleSquareClick={props.handleSquareClick} \n        />\n        <Square \n          position=\"1\"\n          marker={props.spaces[1]} \n          handleSquareClick={props.handleSquareClick}             \n        />\n        <Square \n          position=\"2\"\n          marker={props.spaces[2]} \n          handleSquareClick={props.handleSquareClick}           \n        />\n      </div>\n      <div className=\"row\">\n        <Square \n          position=\"3\"\n          marker={props.spaces[3]} \n          handleSquareClick={props.handleSquareClick} \n        />\n        <Square \n          position=\"4\"\n          marker={props.spaces[4]} \n          handleSquareClick={props.handleSquareClick} \n        />\n        <Square \n          position=\"5\" \n          marker={props.spaces[5]} \n          handleSquareClick={props.handleSquareClick} \n        />\n      </div>\n      <div className=\"row\">\n        <Square \n          position=\"6\" \n          marker={props.spaces[6]} \n          handleSquareClick={props.handleSquareClick}             \n        />\n        <Square \n          position=\"7\"\n          marker={props.spaces[7]} \n          handleSquareClick={props.handleSquareClick} \n        />\n        <Square \n          position=\"8\"\n          marker={props.spaces[8]} \n          handleSquareClick={props.handleSquareClick} \n        />\n      </div>\n    </div>\n    );\n}\n\nexport default Board;","import React from 'react';\nimport '../Turns.css';\n\nconst Turns = ({ humanTurn, humanMarker, compMarker }) => {\n  return (\n    <div className=\"Turns\">\n      { humanTurn ? 'Your turn' : 'Computer\\'s turn' }\n    </div>\n  );\n}\n\nexport default Turns;","import React, { Component } from 'react';\nimport Modal from './Modal';\nimport Board from './Board';\nimport Turns from './Turns';\nimport '../Game.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      atGameStart: true,\n      winner: null,\n      humanTurn: true,\n      humanMarker: null,\n      compMarker: null,\n      spaces: Array(9).fill('')\n    };\n  }\n  \n  handleMarkerOptionClick = (e) => {\n    const compMarker = e.target.innerHTML === 'X' ? 'O' : 'X';\n\n    this.setState({\n      atGameStart: false,\n      humanMarker: e.target.innerHTML,\n      compMarker: compMarker\n    });\n  }\n\n  handleSquareClick = (e) => {\n    if (this.state.humanTurn && this.state.winner === null) {\n      const position = e.target.dataset.position;\n      let spaces = this.state.spaces.slice();\n      // only mark the square if it's empty\n      if (spaces[position] === '') {\n        spaces[position] = this.state.humanMarker;\n        this.setState({ spaces: spaces });\n        this.changeTurns();\n      }\n    }\n  }\n\n  handleRestartClick = () => {\n    setTimeout(() => {\n      this.setState({\n        atGameStart: true,\n        winner: null,\n        spaces: Array(9).fill(''),\n        humanTurn: true,\n        humanMarker: null,\n        compMarker: null\n      })\n     }, 300);\n  }\n\n  getEndState = (player) => {\n    switch (player) {\n      case 'human':\n        setTimeout(() => this.setState({ winner: 'human' }), 600);\n        break;\n      case 'computer':\n        setTimeout(() => this.setState({ winner: 'computer' }), 600);\n        break;\n      case 'tie':\n        setTimeout(() => this.setState({ winner: 'tie' }), 600);\n        break;\n      default: \n        break;\n    }\n  }\n\n  changeTurns() {\n    this.setState({ humanTurn: !this.state.humanTurn });\n  }\n\n  getOpenSpaces() {\n    let openSpaces = [];\n    for (let i = 0; i < this.state.spaces.length; i++) {\n      if (this.state.spaces[i] === '') { openSpaces.push(i); }\n    }\n\n    return openSpaces;\n  }\n\n  // pass in either 'X' or 'O'\n  isGameOverFor(marker) {\n    let playerChecked = this.state.humanMarker === marker ? 'human' : 'computer';\n\n    if (\n      (this.state.spaces[0] === marker && this.state.spaces[1] === marker && this.state.spaces[2] === marker) ||\n      (this.state.spaces[3] === marker && this.state.spaces[4] === marker && this.state.spaces[5] === marker) ||\n      (this.state.spaces[6] === marker && this.state.spaces[7] === marker && this.state.spaces[8] === marker) ||\n      (this.state.spaces[0] === marker && this.state.spaces[3] === marker && this.state.spaces[6] === marker) ||\n      (this.state.spaces[1] === marker && this.state.spaces[4] === marker && this.state.spaces[7] === marker) ||\n      (this.state.spaces[2] === marker && this.state.spaces[5] === marker && this.state.spaces[8] === marker) ||\n      (this.state.spaces[0] === marker && this.state.spaces[4] === marker && this.state.spaces[8] === marker) ||\n      (this.state.spaces[2] === marker && this.state.spaces[4] === marker && this.state.spaces[6] === marker)\n    ) {\n      // a win\n      if (playerChecked === 'human') {\n        this.getEndState('human');\n        return true;\n      } else if (playerChecked === 'computer') {\n        this.getEndState('computer');\n        return true;\n      }\n    } else if (this.getOpenSpaces().length === 0) {\n      this.getEndState('tie');\n      return true;\n    } else {\n      // no win, no tie yet\n      return false;\n    }\n  }\n\n  componentDidUpdate() {\n    // check for game over\n    // computer's move\n\n    // extra rerender\n    // turns don't update in time ??\n    const openSpaces = this.getOpenSpaces();\n    if (this.state.winner === null && (this.isGameOverFor(this.state.humanMarker) || this.isGameOverFor(this.state.compMarker))) {\n      console.log('GAME OVER');\n      return;\n    } else if (!this.state.humanTurn && openSpaces.length !== 0 && this.state.winner === null) {\n      const randomPosition = openSpaces[Math.floor(Math.random() * Math.floor(openSpaces.length))];\n      let spaces = this.state.spaces.slice();\n      spaces[randomPosition] = this.state.compMarker;\n      setTimeout(() => {\n        this.setState({ spaces: spaces });\n      }, 1200);\n      this.changeTurns();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <h1>Tic Tac Toe</h1>\n        <main>\n          {this.state.atGameStart && \n            <Modal \n              type=\"chooseOption\" \n              handleMarkerOptionClick={this.handleMarkerOptionClick} \n            /> \n          }\n\n          {this.state.winner && \n            <Modal \n              type=\"gameOver\" \n              winner={this.state.winner}\n              handleRestartClick={this.handleRestartClick} \n            /> \n          }\n\n          <Board \n            spaces={this.state.spaces}\n            handleSquareClick={this.handleSquareClick}\n          />\n          <Turns \n            humanTurn={this.state.humanTurn}\n            humanMarker={this.state.humanMarker}\n            compMarker={this.state.compMarker}\n          />\n        </main>\n      </div>\n    );\n    }\n  }\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}